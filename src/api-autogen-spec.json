{
  "swagger": "2.0",
  "info": {
    "title": "Crowd Comic API",
    "description": "API endpoints for Crowd Comic. Keep in mind many of these endpoints are subject to change as the API continues to grow. Authentication is likely the first thing to change when the site implements logging in and session based authentication.",
    "contact": {
      "name": "",
      "email": "",
      "url": ""
    },
    "version": "1.0.0"
  },
  "host": "localhost:4000",
  "servers": [
    {
      "url": "http://localhost:4000/",
      "description": "Local server"
    },
    {
      "url": "<your live url here>",
      "description": "Live server"
    }
  ],
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/": {
      "get": {
        "description": "Help Page",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/image/{id}": {
      "get": {
        "tags": [
          "image"
        ],
        "summary": "Get an image by its id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the id of the image"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the link to the image",
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "example": "link/to/image"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/hook/{id}": {
      "get": {
        "tags": [
          "hook"
        ],
        "summary": "Get a hook by its id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "the id of the hook"
          }
        ],
        "responses": {
          "200": {
            "description": "The hook with the requested ID",
            "schema": {
              "$ref": "#/definitions/hook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "could not find hook with id ${id}"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/panel/{id}": {
      "get": {
        "tags": [
          "panel"
        ],
        "summary": "Get a panel by its id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "the id of the panel"
          }
        ],
        "responses": {
          "200": {
            "description": "A panel with requested id",
            "schema": {
              "type": "object",
              "properties": {
                "image": {
                  "type": "string",
                  "example": "path/to/image"
                },
                "index": {
                  "type": "number",
                  "example": 0
                },
                "panel_set_id": {
                  "type": "number",
                  "example": 0
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "could not find panel with id ${id}"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/panel_sets/{id}/hooks": {
      "get": {
        "tags": [
          "hook"
        ],
        "summary": "Get all of the hooks connected to a panel set",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "the id of the panel set"
          }
        ],
        "responses": {
          "200": {
            "description": "The array of hooks connected to provided panel set",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hook"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "could not find hooks connected to panel set with id ${id}"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/panel/{id}/hooks": {
      "get": {
        "tags": [
          "hook"
        ],
        "summary": "Get all hooks connected to a specific panel",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "the id of the panel"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of hooks belonging to provided panel",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hook"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "could not find hooks under panel with id ${id}"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/panel_set/{id}/images": {
      "get": {
        "tags": [
          "image"
        ],
        "summary": "Get all images from a panel set",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "the id of the panel set"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns array of all image urls",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "example": "link/to/image"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/panel_set/{id}": {
      "get": {
        "tags": [
          "panel-set"
        ],
        "summary": "get a panel set by its id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "the id of the panel set"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the panel set",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 0
                },
                "author_id": {
                  "type": "string",
                  "example": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "a panel with the id of \"${id}\" cannot be found"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/panel_sets/{ids}/panels": {
      "get": {
        "tags": [
          "panel"
        ],
        "summary": "Get all panels in requested panel set(s)",
        "description": "",
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Numbers separated by a - ex: 1-2-3-4"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of panels",
            "schema": {
              "$ref": "#/definitions/panelArray"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "could not find panels from panel sets ${arr}"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/panel_set/{panel_set_id}/{index}/panel": {
      "get": {
        "tags": [
          "panel"
        ],
        "summary": "Get a panel given the panel set it came from and its index",
        "description": "",
        "parameters": [
          {
            "name": "panel_set_id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "the id of the panel set"
          },
          {
            "name": "index",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "the index of the panel"
          }
        ],
        "responses": {
          "200": {
            "description": "A panel",
            "schema": {
              "$ref": "#/definitions/panel"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "could not find panel with panel_set_id ${panel_set_id} and index of ${index}"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get a user by its id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/userResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User with id of \"${id}\" does not exist"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/session/{id}/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get a user from a session given a session id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the id of the session"
          }
        ],
        "responses": {
          "200": {
            "description": "A user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userResponse"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Session/User with an id of ${id} does not exist"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/{id}/panel_sets": {
      "get": {
        "tags": [
          "panel-set"
        ],
        "summary": "get an array of panel sets from a user given the user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "the id of the trunk panel set"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/panel_set"
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Returns an array of panel sets and their children"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "a panel set with the id of \"${id}\" cannot be found"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/trunks": {
      "get": {
        "tags": [
          "panel-set"
        ],
        "summary": "Get all panel sets in database that are trunks",
        "description": "",
        "responses": {
          "200": {
            "description": "Get all trunk panel_sets",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/panel_set"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/error"
            },
            "description": "Bad Request"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "No trunks were found"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/tree/{id}": {
      "get": {
        "tags": [
          "panel-set"
        ],
        "summary": "get all panel sets that belong to the tree starting at the given panel set",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "the id of the trunk panel set"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of panel sets and their children",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/panel_set"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "a panel set with the id of \"${id}\" cannot be found"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/session/{id}": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "get a session by its id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "the id of the session"
          }
        ],
        "responses": {
          "200": {
            "description": "A session",
            "schema": {
              "$ref": "#/definitions/session"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "could not find session with id ${id}"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/publish": {
      "post": {
        "tags": [
          "publish"
        ],
        "summary": "Create a new panel set, three panels, and three hooks together and link the panel set to an existing hook",
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "image1",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file of the image for panel-1."
          },
          {
            "name": "image2",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file of the image for panel-2."
          },
          {
            "name": "image3",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file of the image for panel-3."
          },
          {
            "name": "data",
            "in": "formData",
            "required": true,
            "description": "author id and hook array",
            "type": "string"
          },
          {
            "name": "Data Template",
            "in": "body",
            "description": "Schema for the data",
            "schema": {
              "$ref": "#/definitions/publish"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/publishResponse"
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/createUser": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The new users email, password, and display name",
            "schema": {
              "$ref": "#/definitions/userDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/userResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/authenticate": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Provide user credentials to get user information",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Provide user email and password",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "example@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password!"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/userResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "could not find user with provided email/password"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/createSession": {
      "post": {
        "tags": [
          "session"
        ],
        "summary": "Create a session for the given user",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ID of user to create the session for",
            "schema": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "string",
                  "example": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A new session created",
            "schema": {
              "$ref": "#/definitions/session"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/changePassword": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Change a users password",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the users email, old password, and new password",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "example@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password!"
                },
                "newPassword": {
                  "type": "string",
                  "example": "newPassword!"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully changed password"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "could not find user with provided email/password"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/changeDisplayName": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Change the given users password",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the users email, password, and new display name",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "example@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password!"
                },
                "newDisplayName": {
                  "type": "string",
                  "example": "newName"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "display name successfully changed to Jane Smith"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "could not find user with specified email/password"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/saveImage": {
      "post": {
        "tags": [
          "image"
        ],
        "summary": "Save a single image",
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file of the image to save."
          },
          {
            "name": "id",
            "in": "formData",
            "type": "string",
            "required": true,
            "description": "The id of the image to save."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "image-id"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/changePfp": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "change user profile picture",
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file of the image to save."
          },
          {
            "name": "data",
            "in": "formData",
            "required": true,
            "description": "email of user to update",
            "type": "string"
          },
          {
            "name": "Data Template",
            "in": "body",
            "description": "Schema for the data",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "example@email.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Link to the profile picture that was just uploaded",
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "example": "http://host.com/crowd-comic/user-id-1234-5678"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User with an email of ${email} does not exist"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/saveImage": {
      "post": {
        "tags": [
          "image"
        ],
        "summary": "Save a single image",
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The file of the image to save."
          },
          {
            "name": "id",
            "in": "formData",
            "type": "string",
            "required": true,
            "description": "The id of the image to save."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "image-id"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "userDefinition": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "example@example.com"
        },
        "password": {
          "type": "string",
          "example": "asdfASDF1234"
        },
        "display_name": {
          "type": "string",
          "example": "John Doe"
        }
      }
    },
    "userResponse": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "example@example.com"
        },
        "display_name": {
          "type": "string",
          "example": "John Doe"
        },
        "id": {
          "type": "string",
          "example": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "string | string[]"
        }
      }
    },
    "hook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 0
        },
        "position": {
          "type": "string",
          "example": "{ [{\"x\": 4, \"y\": 1}, {\"x\": 4, \"y\": 1}] }"
        },
        "current_panel_id": {
          "type": "number",
          "example": 0
        },
        "next_panel_set_id": {
          "type": "number",
          "example": 0
        }
      }
    },
    "publish": {
      "type": "object",
      "properties": {
        "author_id": {
          "type": "string",
          "example": "ad64a986-16c6-4f59-a944-3f80b0cbfb05"
        },
        "hooks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "position": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "x": {
                      "type": "number",
                      "example": 4
                    },
                    "y": {
                      "type": "number",
                      "example": 1
                    }
                  }
                }
              },
              "panel_index": {
                "type": "number",
                "example": 0
              }
            }
          }
        },
        "hook_id": {
          "type": "number",
          "example": 1
        }
      }
    },
    "panel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 0
        },
        "image": {
          "type": "string",
          "example": "path/to/image"
        },
        "index": {
          "type": "number",
          "example": 0
        },
        "panel_set_id": {
          "type": "number",
          "example": 0
        }
      }
    },
    "panelArray": {
      "type": "object",
      "properties": {
        "panels": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 0
              },
              "image": {
                "type": "string",
                "example": "path/to/image"
              },
              "index": {
                "type": "number",
                "example": 0
              },
              "panel_set_id": {
                "type": "number",
                "example": 0
              }
            }
          }
        }
      }
    },
    "panel_set": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 0
        },
        "author_id": {
          "type": "string",
          "example": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
        }
      }
    },
    "session": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
        },
        "user-id": {
          "type": "string",
          "example": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
        }
      }
    },
    "panelCreate": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "example": "sdfe34refergfer4trffs"
        },
        "panel_set_id": {
          "type": "number",
          "example": 0
        }
      }
    },
    "panelUpdate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 0
        },
        "image": {
          "type": "string",
          "example": "sdfe34refergfer4trffs"
        }
      }
    },
    "publishResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "string",
          "example": "Panel_Set successfully published."
        }
      }
    },
    "addSetToHookDefinition": {
      "type": "object",
      "properties": {
        "hook_id": {
          "type": "number",
          "example": 1
        },
        "panel_set_id": {
          "type": "number",
          "example": 1
        }
      }
    }
  }
}